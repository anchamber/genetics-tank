// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TankServiceClient is the client API for TankService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TankServiceClient interface {
	StreamTanks(ctx context.Context, in *StreamTanksRequest, opts ...grpc.CallOption) (TankService_StreamTanksClient, error)
	GetTank(ctx context.Context, in *GetTankRequest, opts ...grpc.CallOption) (*TankResponse, error)
	CreateTank(ctx context.Context, in *CreateTankRequest, opts ...grpc.CallOption) (*CreateTankResponse, error)
	UpdateTank(ctx context.Context, in *UpdateTankRequest, opts ...grpc.CallOption) (*UpdateTankResponse, error)
	DeleteTank(ctx context.Context, in *DeleteTankRequest, opts ...grpc.CallOption) (*DeleteTankResponse, error)
}

type tankServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTankServiceClient(cc grpc.ClientConnInterface) TankServiceClient {
	return &tankServiceClient{cc}
}

func (c *tankServiceClient) StreamTanks(ctx context.Context, in *StreamTanksRequest, opts ...grpc.CallOption) (TankService_StreamTanksClient, error) {
	stream, err := c.cc.NewStream(ctx, &TankService_ServiceDesc.Streams[0], "/anchamber.genetics.TankService/StreamTanks", opts...)
	if err != nil {
		return nil, err
	}
	x := &tankServiceStreamTanksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TankService_StreamTanksClient interface {
	Recv() (*TankResponse, error)
	grpc.ClientStream
}

type tankServiceStreamTanksClient struct {
	grpc.ClientStream
}

func (x *tankServiceStreamTanksClient) Recv() (*TankResponse, error) {
	m := new(TankResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tankServiceClient) GetTank(ctx context.Context, in *GetTankRequest, opts ...grpc.CallOption) (*TankResponse, error) {
	out := new(TankResponse)
	err := c.cc.Invoke(ctx, "/anchamber.genetics.TankService/GetTank", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tankServiceClient) CreateTank(ctx context.Context, in *CreateTankRequest, opts ...grpc.CallOption) (*CreateTankResponse, error) {
	out := new(CreateTankResponse)
	err := c.cc.Invoke(ctx, "/anchamber.genetics.TankService/CreateTank", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tankServiceClient) UpdateTank(ctx context.Context, in *UpdateTankRequest, opts ...grpc.CallOption) (*UpdateTankResponse, error) {
	out := new(UpdateTankResponse)
	err := c.cc.Invoke(ctx, "/anchamber.genetics.TankService/UpdateTank", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tankServiceClient) DeleteTank(ctx context.Context, in *DeleteTankRequest, opts ...grpc.CallOption) (*DeleteTankResponse, error) {
	out := new(DeleteTankResponse)
	err := c.cc.Invoke(ctx, "/anchamber.genetics.TankService/DeleteTank", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TankServiceServer is the server API for TankService service.
// All implementations must embed UnimplementedTankServiceServer
// for forward compatibility
type TankServiceServer interface {
	StreamTanks(*StreamTanksRequest, TankService_StreamTanksServer) error
	GetTank(context.Context, *GetTankRequest) (*TankResponse, error)
	CreateTank(context.Context, *CreateTankRequest) (*CreateTankResponse, error)
	UpdateTank(context.Context, *UpdateTankRequest) (*UpdateTankResponse, error)
	DeleteTank(context.Context, *DeleteTankRequest) (*DeleteTankResponse, error)
	mustEmbedUnimplementedTankServiceServer()
}

// UnimplementedTankServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTankServiceServer struct {
}

func (UnimplementedTankServiceServer) StreamTanks(*StreamTanksRequest, TankService_StreamTanksServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamTanks not implemented")
}
func (UnimplementedTankServiceServer) GetTank(context.Context, *GetTankRequest) (*TankResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTank not implemented")
}
func (UnimplementedTankServiceServer) CreateTank(context.Context, *CreateTankRequest) (*CreateTankResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTank not implemented")
}
func (UnimplementedTankServiceServer) UpdateTank(context.Context, *UpdateTankRequest) (*UpdateTankResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTank not implemented")
}
func (UnimplementedTankServiceServer) DeleteTank(context.Context, *DeleteTankRequest) (*DeleteTankResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTank not implemented")
}
func (UnimplementedTankServiceServer) mustEmbedUnimplementedTankServiceServer() {}

// UnsafeTankServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TankServiceServer will
// result in compilation errors.
type UnsafeTankServiceServer interface {
	mustEmbedUnimplementedTankServiceServer()
}

func RegisterTankServiceServer(s grpc.ServiceRegistrar, srv TankServiceServer) {
	s.RegisterService(&TankService_ServiceDesc, srv)
}

func _TankService_StreamTanks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamTanksRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TankServiceServer).StreamTanks(m, &tankServiceStreamTanksServer{stream})
}

type TankService_StreamTanksServer interface {
	Send(*TankResponse) error
	grpc.ServerStream
}

type tankServiceStreamTanksServer struct {
	grpc.ServerStream
}

func (x *tankServiceStreamTanksServer) Send(m *TankResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TankService_GetTank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTankRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TankServiceServer).GetTank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anchamber.genetics.TankService/GetTank",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TankServiceServer).GetTank(ctx, req.(*GetTankRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TankService_CreateTank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTankRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TankServiceServer).CreateTank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anchamber.genetics.TankService/CreateTank",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TankServiceServer).CreateTank(ctx, req.(*CreateTankRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TankService_UpdateTank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTankRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TankServiceServer).UpdateTank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anchamber.genetics.TankService/UpdateTank",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TankServiceServer).UpdateTank(ctx, req.(*UpdateTankRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TankService_DeleteTank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTankRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TankServiceServer).DeleteTank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anchamber.genetics.TankService/DeleteTank",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TankServiceServer).DeleteTank(ctx, req.(*DeleteTankRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TankService_ServiceDesc is the grpc.ServiceDesc for TankService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TankService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "anchamber.genetics.TankService",
	HandlerType: (*TankServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTank",
			Handler:    _TankService_GetTank_Handler,
		},
		{
			MethodName: "CreateTank",
			Handler:    _TankService_CreateTank_Handler,
		},
		{
			MethodName: "UpdateTank",
			Handler:    _TankService_UpdateTank_Handler,
		},
		{
			MethodName: "DeleteTank",
			Handler:    _TankService_DeleteTank_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamTanks",
			Handler:       _TankService_StreamTanks_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "tank.proto",
}
